import numpy as np
from  speech.icp import best_fit_transform
me = [[0.25542168674698795, 0.3958333333333333], [0.25542168674698795, 0.5], [0.26987951807228916, 0.5916666666666667], [0.28674698795180725, 0.6583333333333333], [0.3156626506024096, 0.7375], [0.3542168674698795, 0.7916666666666666], [0.3927710843373494, 0.8416666666666667], [0.45542168674698796, 0.8708333333333333], [0.5301204819277109, 0.8833333333333333], [0.6072289156626506, 0.8708333333333333], [0.6674698795180722, 0.8291666666666667], [0.7132530120481928, 0.8041666666666667], [0.7518072289156627, 0.7375], [0.7759036144578313, 0.6708333333333333], [0.7903614457831325, 0.5916666666666667], [0.7975903614457831, 0.5], [0.8072289156626506, 0.3958333333333333], [0.30843373493975906, 0.37916666666666665], [0.3542168674698795, 0.37916666666666665], [0.4, 0.37916666666666665], [0.43855421686746987, 0.37916666666666665], [0.46987951807228917, 0.3958333333333333], [0.5927710843373494, 0.37916666666666665], [0.6313253012048192, 0.36666666666666664], [0.6674698795180722, 0.36666666666666664], [0.7132530120481928, 0.36666666666666664], [0.744578313253012, 0.37916666666666665], [0.5373493975903615, 0.44583333333333336], [0.5373493975903615, 0.5125], [0.5373493975903615, 0.5666666666666667], [0.5373493975903615, 0.6041666666666666], [0.4843373493975904, 0.6041666666666666], [0.5084337349397591, 0.6208333333333333], [0.5373493975903615, 0.6208333333333333], [0.5614457831325301, 0.6208333333333333], [0.5855421686746988, 0.6041666666666666], [0.3710843373493976, 0.44583333333333336], [0.4, 0.43333333333333335], [0.43132530120481927, 0.43333333333333335], [0.46265060240963857, 0.44583333333333336], [0.43132530120481927, 0.4583333333333333], [0.3927710843373494, 0.4583333333333333], [0.6072289156626506, 0.44583333333333336], [0.6385542168674698, 0.42083333333333334], [0.6674698795180722, 0.42083333333333334], [0.6987951807228916, 0.44583333333333336], [0.6674698795180722, 0.4583333333333333], [0.6385542168674698, 0.4583333333333333], [0.42409638554216866, 0.6833333333333333], [0.46265060240963857, 0.6708333333333333], [0.5084337349397591, 0.6708333333333333], [0.5301204819277109, 0.6708333333333333], [0.5542168674698795, 0.6583333333333333], [0.6, 0.6708333333333333], [0.6385542168674698, 0.6833333333333333], [0.6, 0.7], [0.5686746987951807, 0.7125], [0.5373493975903615, 0.7125], [0.5012048192771085, 0.7125], [0.46987951807228917, 0.7], [0.42409638554216866, 0.6708333333333333], [0.5012048192771085, 0.6833333333333333], [0.5301204819277109, 0.6833333333333333], [0.5614457831325301, 0.6833333333333333], [0.6313253012048192, 0.6833333333333333], [0.5614457831325301, 0.6708333333333333], [0.5301204819277109, 0.6708333333333333], [0.5012048192771085, 0.6708333333333333]]
avatar = [(125, 224), (134, 245), (139, 266), (149, 298), (161, 325), (178, 350), (198, 371), (220, 385), (247, 389), (278, 385), (303, 373), (323, 353), (340, 325), (353, 299), (361, 269), (367, 246), (378, 220), (145, 206), (169, 190), (189, 186), (215, 192), (230, 204), (269, 201), (285, 193), (313, 186), (338, 194), (352, 208), (250, 224), (250, 244), (250, 264), (250, 279), (232, 296), (243, 298), (249, 300), (257, 298), (266, 297), (167, 217), (184, 210), (205, 211), (224, 225), (205, 238), (180, 238), (274, 225), (294, 210), (316, 209), (332, 217), (323, 235), (295, 239), (210, 324), (222, 320), (237, 320), (248, 322), (259, 319), (275, 318), (289, 322), (277, 338), (262, 342), (251, 346), (238, 344), (222, 338), (218, 326), (234, 327), (248, 328), (270, 327), (283, 325), (264, 335), (250, 337), (235, 335)]
ltemp = [[p[0] / 500, p[1] / 500] for p in avatar]
np_ltemp = np.array(ltemp,dtype=np.float32)

def norm(landmark):
    t,_,_ = best_fit_transform(landmark,np_ltemp)
    n = np.dot(t[0:2,0:2], landmark.T).T
    n += t[:2,2]
    return n.astype(np.float32)

def norm2d(landmark,ref):
    t, _, _ = best_fit_transform(landmark, ref)
    print(t)
    n = np.dot(t[0:2, 0:2], landmark.T).T
    n += t[:2, 2]
    return n.astype(np.float32)

def norm3d(landmark,ref):
    t, _, _ = best_fit_transform(landmark, ref)
    #print(t)
    n = np.dot(t[0:3, 0:3], landmark.T).T
    n += t[:3, 3]
    return n.astype(np.float32)

def norm3d_tranform(landmark,ref):
    t, _, _ = best_fit_transform(landmark, ref)
    return t

def apply_3dtranform(landmark,t):
    n = np.dot(t[0:3, 0:3], landmark.T).T
    n += t[:3, 3]
    return n.astype(np.float32)

def norm3d_t(landmark,ref):
    t, _, _ = best_fit_transform(landmark, ref)
    #print(t)
    n = np.dot(t[0:3, 0:3], landmark.T).T
    n += t[:3, 3]
    return n.astype(np.float32), t

def invers_3d(l,t):

    n = l.copy()
    n -= t[:3, 3]
    n = np.dot(np.linalg.inv(t[0:3, 0:3]), n.T).T
    return n